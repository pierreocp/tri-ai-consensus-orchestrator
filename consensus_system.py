#!/usr/bin/env python3
"""
Syst√®me de consensus et de d√©cision collaborative entre IA
Permet aux IA de voter, d√©battre et collaborer pour am√©liorer leur propre code
"""

import asyncio
import json
import re
import os
import subprocess
import tempfile
from dataclasses import dataclass
from typing import List, Dict, Optional, Any
from enum import Enum
import logging

# Import des clients IA existants
from tri_ai_orchestrator import OpenAIClient, AnthropicClient, GeminiClient, ChatMessage

def safe_json_parse(json_str):
    """Parse JSON de mani√®re s√©curis√©e avec nettoyage pr√©alable"""
    try:
        # Nettoie les caract√®res sp√©ciaux
        cleaned_str = json_str.strip()
        cleaned_str = re.sub(r'[\n\r\t]', ' ', cleaned_str)
        
        # V√©rifier les guillemets non ferm√©s
        quote_count = cleaned_str.count('"')
        if quote_count % 2 != 0:
            print(f"‚ö†Ô∏è Nombre impair de guillemets d√©tect√©: {quote_count}")
            return None
            
        # Parser le JSON
        return json.loads(cleaned_str)
        
    except json.JSONDecodeError as e:
        print(f"‚ùå Erreur de parsing JSON: {str(e)}")
        print(f"üìù Cha√Æne probl√©matique: {json_str[:200]}...")
        return None

class VoteType(Enum):
    APPROVE = "approve"
    REJECT = "reject"
    ABSTAIN = "abstain"
    PROPOSE_MODIFICATION = "propose_modification"

class ProposalStatus(Enum):
    PROPOSED = "proposed"
    UNDER_DISCUSSION = "under_discussion"
    VOTING = "voting"
    APPROVED = "approved"
    REJECTED = "rejected"
    IMPLEMENTED = "implemented"

@dataclass
class Vote:
    agent_name: str
    vote_type: VoteType
    reasoning: str
    modification_suggestion: Optional[str] = None

@dataclass
class Proposal:
    id: str
    title: str
    description: str
    proposed_code: str
    proposer: str
    status: ProposalStatus
    votes: List[Vote]
    discussion_messages: List[ChatMessage]
    consensus_threshold: float = 0.67  # 2/3 majority

    def get_approval_rate(self) -> float:
        """Calcule le taux d'approbation"""
        if not self.votes:
            return 0.0
        approvals = sum(1 for v in self.votes if v.vote_type == VoteType.APPROVE)
        total_votes = len([v for v in self.votes if v.vote_type != VoteType.ABSTAIN])
        return approvals / total_votes if total_votes > 0 else 0.0

    def has_consensus(self) -> bool:
        """V√©rifie si le consensus est atteint"""
        return self.get_approval_rate() >= self.consensus_threshold

    def get_modifications_suggested(self) -> List[str]:
        """R√©cup√®re toutes les modifications sugg√©r√©es"""
        return [v.modification_suggestion for v in self.votes 
                if v.vote_type == VoteType.PROPOSE_MODIFICATION and v.modification_suggestion]

class ConsensusOrchestrator:
    def __init__(self, agents: List[Any]):
        self.agents = agents
        self.proposals: Dict[str, Proposal] = {}
        self.discussion_history: List[ChatMessage] = []
        
    async def initiate_proposal_discussion(self, topic: str) -> Optional[Proposal]:
        """Initie une discussion pour g√©n√©rer une proposition"""
        print(f"\nüéØ === INITIATION DE DISCUSSION: {topic} ===")
        
        # Phase 1: Brainstorming collaboratif
        brainstorm_prompt = f"""
MISSION COLLABORATIVE: {topic}

Vous devez maintenant collaborer pour proposer une am√©lioration concr√®te au script tri_ai_orchestrator.py.

R√àGLES:
1. Discutez de l'id√©e et de sa faisabilit√©
2. Proposez du code Python concret
3. D√©battez des avantages/inconv√©nients
4. Arrivez √† un consensus sur une proposition finale

Commencez la discussion ! @ChatGPT, lance le brainstorming.
"""
        
        # Discussion collaborative de 6 tours
        discussion_messages = await self._run_collaborative_discussion(brainstorm_prompt, 6)
        
        # Phase 2: Extraction de la proposition finale
        proposal = await self._extract_proposal_from_discussion(discussion_messages, topic)
        
        if proposal:
            self.proposals[proposal.id] = proposal
            print(f"‚úÖ Proposition cr√©√©e: {proposal.title}")
            
        return proposal
    
    async def _run_collaborative_discussion(self, prompt: str, turns: int) -> List[ChatMessage]:
        """Ex√©cute une discussion collaborative entre les IA"""
        messages = [
            ChatMessage(role="system", name="moderator", 
                       content="Vous collaborez pour am√©liorer votre propre code. Soyez constructifs et pr√©cis."),
            ChatMessage(role="user", name="moderator", content=prompt)
        ]
        
        current_agent = 0
        for i in range(turns):
            agent = self.agents[current_agent % len(self.agents)]
            print(f"\n--- Tour {i+1}: {agent.name} ---")
            
            try:
                response = await agent.send(messages, max_tokens=300, timeout=30, verbose=False)
                print(f"{agent.name}: {response}")
                
                messages.append(ChatMessage(role="assistant", name=agent.name, content=response))
                
                # D√©tection de mention pour passer √† l'agent suivant
                mentioned_agent = self._detect_mention(response)
                if mentioned_agent:
                    current_agent = self._get_agent_index(mentioned_agent)
                else:
                    current_agent += 1
                    
            except Exception as e:
                print(f"‚ùå Erreur {agent.name}: {e}")
                current_agent += 1
        
        return messages
    
    async def _extract_proposal_from_discussion(self, messages: List[ChatMessage], topic: str) -> Optional[Proposal]:
        """Extrait une proposition concr√®te de la discussion"""
        print("\nüîç === EXTRACTION DE PROPOSITION ===")
        
        # Utilise ChatGPT pour synth√©tiser la discussion
        synthesis_prompt = f"""
Analysez cette discussion collaborative et extrayez UNE proposition concr√®te d'am√©lioration.

DISCUSSION:
{self._format_messages_for_analysis(messages)}

VOTRE MISSION:
R√©pondez UNIQUEMENT au format JSON suivant:
{{
    "title": "Titre court de la proposition",
    "description": "Description d√©taill√©e de l'am√©lioration",
    "proposed_code": "Code Python complet √† impl√©menter",
    "feasible": true/false,
    "benefits": ["avantage1", "avantage2"],
    "risks": ["risque1", "risque2"]
}}

Si aucune proposition claire n'√©merge, r√©pondez: {{"feasible": false}}
"""
        
        try:
            chatgpt = self.agents[0]  # Utilise ChatGPT pour la synth√®se
            response = await chatgpt.send([
                ChatMessage(role="system", name="moderator", content="Tu es un analyseur de discussions techniques."),
                ChatMessage(role="user", name="moderator", content=synthesis_prompt)
            ], max_tokens=1000, timeout=30, verbose=False)
            
            # Extraction du JSON avec parsing s√©curis√©
            json_match = re.search(r'\{.*\}', response, re.DOTALL)
            if json_match:
                data = safe_json_parse(json_match.group(0))
                if data is None:
                    return None
                
                if data.get("feasible", False):
                    proposal_id = f"prop_{len(self.proposals) + 1}"
                    return Proposal(
                        id=proposal_id,
                        title=data["title"],
                        description=data["description"],
                        proposed_code=data["proposed_code"],
                        proposer="Consensus Collaboratif",
                        status=ProposalStatus.PROPOSED,
                        votes=[],
                        discussion_messages=messages
                    )
            
        except Exception as e:
            print(f"‚ùå Erreur extraction: {e}")
        
        return None
    
    async def conduct_voting(self, proposal: Proposal) -> bool:
        """Conduit un vote formel sur une proposition"""
        print(f"\nüó≥Ô∏è === VOTE SUR: {proposal.title} ===")
        proposal.status = ProposalStatus.VOTING
        
        voting_prompt = f"""
VOTE FORMEL SUR PROPOSITION:

TITRE: {proposal.title}
DESCRIPTION: {proposal.description}

CODE PROPOS√â:
```python
{proposal.proposed_code}
```

VOTRE MISSION: Votez sur cette proposition.

R√©pondez EXACTEMENT au format JSON:
{{
    "vote": "approve|reject|abstain|propose_modification",
    "reasoning": "Votre justification d√©taill√©e",
    "modification": "Si propose_modification, d√©crivez la modification"
}}

Soyez pr√©cis et constructifs dans votre analyse !
"""
        
        # Chaque IA vote
        for agent in self.agents:
            try:
                print(f"\n--- Vote de {agent.name} ---")
                response = await agent.send([
                    ChatMessage(role="system", name="moderator", 
                               content="Vous votez sur une proposition d'am√©lioration. Soyez objectifs."),
                    ChatMessage(role="user", name="moderator", content=voting_prompt)
                ], max_tokens=200, timeout=30, verbose=False)
                
                # Extraction du vote
                vote = self._extract_vote(response, agent.name)
                if vote:
                    proposal.votes.append(vote)
                    print(f"‚úÖ {agent.name}: {vote.vote_type.value} - {vote.reasoning[:100]}...")
                
            except Exception as e:
                print(f"‚ùå Erreur vote {agent.name}: {e}")
        
        # Analyse des r√©sultats
        approval_rate = proposal.get_approval_rate()
        has_consensus = proposal.has_consensus()
        
        print(f"\nüìä R√âSULTATS DU VOTE:")
        print(f"Taux d'approbation: {approval_rate:.1%}")
        print(f"Consensus atteint: {'‚úÖ OUI' if has_consensus else '‚ùå NON'}")
        
        if has_consensus:
            proposal.status = ProposalStatus.APPROVED
        else:
            proposal.status = ProposalStatus.REJECTED
            
        return has_consensus
    
    async def implement_approved_proposal(self, proposal: Proposal) -> bool:
        """Impl√©mente une proposition approuv√©e"""
        if proposal.status != ProposalStatus.APPROVED:
            print("‚ùå Proposition non approuv√©e")
            return False
            
        print(f"\nüöÄ === IMPL√âMENTATION: {proposal.title} ===")
        
        try:
            # Cr√©e un fichier temporaire avec le nouveau code
            with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
                f.write(proposal.proposed_code)
                temp_file = f.name
            
            # Test de syntaxe
            result = subprocess.run(['python', '-m', 'py_compile', temp_file], 
                                  capture_output=True, text=True)
            
            if result.returncode != 0:
                print(f"‚ùå Erreur de syntaxe: {result.stderr}")
                os.unlink(temp_file)
                return False
            
            # Backup de l'ancien fichier
            backup_file = f"tri_ai_orchestrator_backup_{len(self.proposals)}.py"
            if os.path.exists("tri_ai_orchestrator.py"):
                os.rename("tri_ai_orchestrator.py", backup_file)
                print(f"üì¶ Backup cr√©√©: {backup_file}")
            
            # D√©ploie le nouveau code
            os.rename(temp_file, "tri_ai_orchestrator.py")
            print("‚úÖ Nouveau code d√©ploy√©!")
            
            proposal.status = ProposalStatus.IMPLEMENTED
            
            # Test rapide du nouveau code
            test_result = subprocess.run(['python', 'tri_ai_orchestrator.py', '--help'], 
                                       capture_output=True, text=True, timeout=10)
            
            if test_result.returncode == 0:
                print("‚úÖ Test de base r√©ussi!")
                return True
            else:
                print(f"‚ö†Ô∏è Test de base √©chou√©: {test_result.stderr}")
                # Rollback
                os.rename("tri_ai_orchestrator.py", f"tri_ai_orchestrator_failed_{len(self.proposals)}.py")
                os.rename(backup_file, "tri_ai_orchestrator.py")
                print("üîÑ Rollback effectu√©")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur impl√©mentation: {e}")
            return False
    
    def _extract_vote(self, response: str, agent_name: str) -> Optional[Vote]:
        """Extrait un vote de la r√©ponse d'une IA"""
        try:
            json_match = re.search(r'\{.*\}', response, re.DOTALL)
            if json_match:
                data = safe_json_parse(json_match.group(0))
                if data is None:
                    return None
                
                vote_type_str = data.get("vote", "abstain")
                vote_type = VoteType(vote_type_str)
                
                return Vote(
                    agent_name=agent_name,
                    vote_type=vote_type,
                    reasoning=data.get("reasoning", "Pas de justification"),
                    modification_suggestion=data.get("modification")
                )
        except Exception as e:
            print(f"‚ùå Erreur extraction vote: {e}")
        
        return None
    
    def _detect_mention(self, text: str) -> Optional[str]:
        """D√©tecte les mentions d'agents dans le texte"""
        mentions = re.findall(r'@(\w+)', text)
        agent_names = [agent.name for agent in self.agents]
        
        for mention in mentions:
            if mention in agent_names:
                return mention
        return None
    
    def _get_agent_index(self, agent_name: str) -> int:
        """R√©cup√®re l'index d'un agent par son nom"""
        for i, agent in enumerate(self.agents):
            if agent.name == agent_name:
                return i
        return 0
    
    def _format_messages_for_analysis(self, messages: List[ChatMessage]) -> str:
        """Formate les messages pour l'analyse"""
        formatted = []
        for msg in messages:
            if msg.role != "system":
                formatted.append(f"{msg.name}: {msg.content}")
        return "\n".join(formatted)

async def main():
    """Fonction principale pour tester le syst√®me de consensus"""
    print("ü§ñ === SYST√àME DE CONSENSUS INTER-IA ===\n")
    
    # Initialisation des agents
    agents = [
        OpenAIClient("ChatGPT", "gpt-4o"),
        AnthropicClient("Claude", "claude-3-5-sonnet-20241022"),
        GeminiClient("Gemini", "gemini-1.5-pro"),
    ]
    
    orchestrator = ConsensusOrchestrator(agents)
    
    # Test du syst√®me
    topic = "Am√©liorer la gestion des erreurs et ajouter un syst√®me de retry intelligent"
    
    # Phase 1: Discussion et proposition
    proposal = await orchestrator.initiate_proposal_discussion(topic)
    
    if proposal:
        # Phase 2: Vote
        consensus_reached = await orchestrator.conduct_voting(proposal)
        
        if consensus_reached:
            # Phase 3: Impl√©mentation
            print("\nüéâ Consensus atteint ! Impl√©mentation en cours...")
            success = await orchestrator.implement_approved_proposal(proposal)
            
            if success:
                print("üöÄ SUCC√àS! Les IA ont collabor√© pour am√©liorer leur propre code!")
            else:
                print("‚ùå √âchec de l'impl√©mentation")
        else:
            print("‚ùå Pas de consensus. Proposition rejet√©e.")
            
            # Analyse des modifications sugg√©r√©es
            modifications = proposal.get_modifications_suggested()
            if modifications:
                print("\nüí° Modifications sugg√©r√©es:")
                for i, mod in enumerate(modifications, 1):
                    print(f"{i}. {mod}")
    else:
        print("‚ùå Aucune proposition viable n'a √©merg√© de la discussion")

if __name__ == "__main__":
    asyncio.run(main())
